[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "전 토리에염",
    "section": "",
    "text": "킁킁킁\n 안녕하세요, 데이터 분석 좀 어렵네요ㅋㅋ"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\n\nprice_avg = sum(df[\"가격\"]) / 3\nvol_avg = sum(df[\"판매량\"]) / 3\n\nprint(\"과일 가격의 평균은\", price_avg)\nprint(\"과일 판매량의 평균은\", vol_avg)\n\n과일 가격의 평균은 2100.0\n과일 판매량의 평균은 25.0"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\nsum(df[\"가격\"]) / 3\nsum(df[\"판매량\"]) / 3\n\n25.0"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1 #은 귀요미\n\n2"
  },
  {
    "objectID": "hw1.html#숙제하기",
    "href": "hw1.html#숙제하기",
    "title": "hw1",
    "section": "",
    "text": "#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\nsum(df[\"가격\"]) / 3\nsum(df[\"판매량\"]) / 3\n\n25.0"
  },
  {
    "objectID": "hw1.html#숙제해라-공부해라",
    "href": "hw1.html#숙제해라-공부해라",
    "title": "hw1",
    "section": "",
    "text": "#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\nprice_avg = sum(df[\"가격\"]) / 3\nvol_avg = sum(df[\"판매량\"]) / 3\n\nprint(\"과일 가격의 평균은\", price_avg)\nprint(\"과일 판매량의 평균은\", vol_avg)\n\n과일 가격의 평균은 2100.0\n과일 판매량의 평균은 25.0\n\n\n\n\n\n\n\n# mpg 데이터 불러오기\nmpg_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\nmpg_new = mpg_raw.copy()\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\n\n\n#cty -&gt; city\nmpg_new = mpg_new.rename(columns = {'cty' : 'city'})\n\n#hwy -&gt; highway\nmpg_new = mpg_new.rename(columns = {'hwy' : 'highway'})\n\n\n\n\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n\n\n\n\n# midwest.csv 데이터 불러오기\nmidwest_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/midwest.csv')\nmidwest_new = midwest_raw.copy()\nmidwest_new\n\nmidwest_new.head()\nmidwest_new.tail()\nmidwest_new.shape\nmidwest_new.info()\nmidwest_new.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\n\n\n#poptotal -&gt; total\nmidwest_new = midwest_new.rename(columns = {'poptotal' : 'total'})\n\n#popasian -&gt; asian\nmidwest_new = midwest_new.rename(columns = {'popasian' : 'asian'})\n\n\n\n\n\nmidwest_new['a_ratio'] = (midwest_new[\"asian\"] / midwest_new[\"total\"]) * 100\nmidwest_new['a_ratio'].plot.hist()\nimport matplotlib.pyplot as plt\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\nimport numpy as np\n#아시아 인구 백분율 전체 평균\nmidwest_new['a_mean'] = (midwest_new['a_ratio'].mean())\n\n#평균을 초과하는지 비교\nmidwest_new['vs_mean'] = np.where(midwest_new['a_ratio'] &gt; midwest_new['a_mean'], 'large', 'small')\nmidwest_new\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\na_ratio\na_mean\nvs_mean\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n0.487246\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n0.487246\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n0.487246\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n0.487246\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n0.487246\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n0.487246\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n0.487246\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n0.487246\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n0.487246\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n0.487246\nlarge\n\n\n\n\n437 rows × 31 columns\n\n\n\n\n\n\n\n#빈도 구하기\ncount_vs = midwest_new['vs_mean'].value_counts()\ncount_vs\n\n#막대 그래프 만들기\ncount_vs.plot.bar(rot = 0)"
  },
  {
    "objectID": "hw1.html#숙제해라-네",
    "href": "hw1.html#숙제해라-네",
    "title": "hw1",
    "section": "",
    "text": "#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\n\nprice_avg = sum(df[\"가격\"]) / 3\nvol_avg = sum(df[\"판매량\"]) / 3\n\nprint(\"과일 가격의 평균은\", price_avg)\nprint(\"과일 판매량의 평균은\", vol_avg)\n\n과일 가격의 평균은 2100.0\n과일 판매량의 평균은 25.0\n\n\n\n\n\n\n\n# mpg 데이터 불러오기\nmpg_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\nmpg_new = mpg_raw.copy()\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\n\n\n\n#cty -&gt; city\nmpg_new = mpg_new.rename(columns = {'cty' : 'city'})\n\n#hwy -&gt; highway\nmpg_new = mpg_new.rename(columns = {'hwy' : 'highway'})\n\n\n\n\n\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n\n\n\n\n\n# midwest.csv 데이터 불러오기\nmidwest_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/midwest.csv')\nmidwest_new = midwest_raw.copy()\nmidwest_new\n\nmidwest_new.head()\nmidwest_new.tail()\nmidwest_new.shape\nmidwest_new.info()\nmidwest_new.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\n\n\n\n#poptotal -&gt; total\nmidwest_new = midwest_new.rename(columns = {'poptotal' : 'total'})\n\n#popasian -&gt; asian\nmidwest_new = midwest_new.rename(columns = {'popasian' : 'asian'})\n\n\n\n\n\n\nmidwest_new['a_ratio'] = (midwest_new[\"asian\"] / midwest_new[\"total\"]) * 100\nmidwest_new['a_ratio'].plot.hist()\nimport matplotlib.pyplot as plt\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\nimport numpy as np\n#아시아 인구 백분율 전체 평균\nmidwest_new['a_mean'] = (midwest_new['a_ratio'].mean())\n\n#평균을 초과하는지 비교\nmidwest_new['vs_mean'] = np.where(midwest_new['a_ratio'] &gt; midwest_new['a_mean'], 'large', 'small')\nmidwest_new\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\na_ratio\na_mean\nvs_mean\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n0.487246\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n0.487246\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n0.487246\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n0.487246\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n0.487246\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n0.487246\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n0.487246\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n0.487246\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n0.487246\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n0.487246\nlarge\n\n\n\n\n437 rows × 31 columns\n\n\n\n\n\n\n\n\n#빈도 구하기\ncount_vs = midwest_new['vs_mean'].value_counts()\ncount_vs\n\n#막대 그래프 만들기\ncount_vs.plot.bar(rot = 0)"
  },
  {
    "objectID": "hw1.html#페이지",
    "href": "hw1.html#페이지",
    "title": "hw1",
    "section": "",
    "text": "#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\n\nprice_avg = sum(df[\"가격\"]) / 3\nvol_avg = sum(df[\"판매량\"]) / 3\n\nprint(\"과일 가격의 평균은\", price_avg)\nprint(\"과일 판매량의 평균은\", vol_avg)\n\n과일 가격의 평균은 2100.0\n과일 판매량의 평균은 25.0"
  },
  {
    "objectID": "hw1.html#페이지-1",
    "href": "hw1.html#페이지-1",
    "title": "hw1",
    "section": "115 페이지",
    "text": "115 페이지\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\n# mpg 데이터 불러오기\nmpg_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\nmpg_new = mpg_raw.copy()\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\n#cty -&gt; city\nmpg_new = mpg_new.rename(columns = {'cty' : 'city'})\n\n#hwy -&gt; highway\nmpg_new = mpg_new.rename(columns = {'hwy' : 'highway'})\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "hw1.html#페이지-2",
    "href": "hw1.html#페이지-2",
    "title": "hw1",
    "section": "130 페이지",
    "text": "130 페이지\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\n# midwest.csv 데이터 불러오기\nmidwest_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/midwest.csv')\nmidwest_new = midwest_raw.copy()\nmidwest_new\n\nmidwest_new.head()\nmidwest_new.tail()\nmidwest_new.shape\nmidwest_new.info()\nmidwest_new.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구)변수를 asian으로 수정하세요.\n\n#poptotal -&gt; total\nmidwest_new = midwest_new.rename(columns = {'poptotal' : 'total'})\n\n#popasian -&gt; asian\nmidwest_new = midwest_new.rename(columns = {'popasian' : 'asian'})\n\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest_new['a_ratio'] = (midwest_new[\"asian\"] / midwest_new[\"total\"]) * 100\nmidwest_new['a_ratio'].plot.hist()\nimport matplotlib.pyplot as plt\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n#아시아 인구 백분율 전체 평균\nmidwest_new['a_mean'] = (midwest_new['a_ratio'].mean())\n\n#평균을 초과하는지 비교\nmidwest_new['vs_mean'] = np.where(midwest_new['a_ratio'] &gt; midwest_new['a_mean'], 'large', 'small')\nmidwest_new\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\na_ratio\na_mean\nvs_mean\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n0.487246\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n0.487246\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n0.487246\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n0.487246\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n0.487246\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n0.487246\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n0.487246\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n0.487246\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n0.487246\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n0.487246\nlarge\n\n\n\n\n437 rows × 31 columns\n\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\n#빈도 구하기\ncount_vs = midwest_new['vs_mean'].value_counts()\ncount_vs\n\n#막대 그래프 만들기\ncount_vs.plot.bar(rot = 0)"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "hw2",
    "section": "",
    "text": "# mpg 데이터 불러오기\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nmpg_a = mpg.query('displ &lt;= 4')\nmpg_b = mpg.query('displ &gt;= 5')\n\nmpg_a['hwy'].mean(), mpg_b['hwy'].mean()\n\n(np.float64(25.96319018404908), np.float64(18.07894736842105))\n\n\n\n\n\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota = mpg.query(\"manufacturer == 'toyota'\")\n\nmpg_audi['cty'].mean(), mpg_toyota['cty'].mean()\n\n(np.float64(17.61111111111111), np.float64(18.529411764705884))\n\n\n\n\n\n\nmpg_new = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#페이지",
    "href": "hw2.html#페이지",
    "title": "hw2",
    "section": "",
    "text": "# mpg 데이터 불러오기\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nmpg_a = mpg.query('displ &lt;= 4')\nmpg_b = mpg.query('displ &gt;= 5')\n\nmpg_a['hwy'].mean(), mpg_b['hwy'].mean()\n\n(np.float64(25.96319018404908), np.float64(18.07894736842105))\n\n\n\n\n\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota = mpg.query(\"manufacturer == 'toyota'\")\n\nmpg_audi['cty'].mean(), mpg_toyota['cty'].mean()\n\n(np.float64(17.61111111111111), np.float64(18.529411764705884))\n\n\n\n\n\n\nmpg_new = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#페이지-1",
    "href": "hw2.html#페이지-1",
    "title": "hw2",
    "section": "153 페이지",
    "text": "153 페이지\n\nQ1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. audi'에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi_mpg = mpg.query(\"manufacturer == 'audi'\")\naudi_mpg.sort_values('hwy', ascending = False).head()\n\nmpg.query(\"manufacturer == 'audi'\") \\\n   .sort_values('hwy', ascending = False) \\\n   .head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "hw2.html#페이지-2",
    "href": "hw2.html#페이지-2",
    "title": "hw2",
    "section": "158 페이지",
    "text": "158 페이지\nmpg데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니다. 두 변수는 각각 활용하는 대신 하나의 합산 연비 변수를 만들어 분석하려고 합니다.\n\nQ1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 합산 연비 변수를 추가하세요.\n\nmpg_new = mpg.copy()\nmpg_new = mpg_new.assign(mileage = mpg_new['cty'] + mpg_new['hwy'])\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_new = mpg_new.assign(mileage_mean = mpg_new['mileage'] / 2)\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_new.sort_values('mileage_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg원본을 이용하세요.\n\nmpg.assign(mileage = mpg_new['cty'] + mpg_new['hwy']) \\\n   .assign(mileage_mean = mpg_new['mileage'] / 2) \\\n   .sort_values('mileage_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw2/hw2.html",
    "href": "posts/hw2/hw2.html",
    "title": "hw2",
    "section": "",
    "text": "# mpg 데이터 불러오기\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nmpg_a = mpg.query('displ &lt;= 4')\nmpg_b = mpg.query('displ &gt;= 5')\n\nmpg_a['hwy'].mean(), mpg_b['hwy'].mean()\n\n(np.float64(25.96319018404908), np.float64(18.07894736842105))\n\n\n\n\n\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota = mpg.query(\"manufacturer == 'toyota'\")\n\nmpg_audi['cty'].mean(), mpg_toyota['cty'].mean()\n\n(np.float64(17.61111111111111), np.float64(18.529411764705884))\n\n\n\n\n\n\nmpg_new = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/hw2.html#페이지",
    "href": "posts/hw2/hw2.html#페이지",
    "title": "hw2",
    "section": "",
    "text": "# mpg 데이터 불러오기\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nmpg_a = mpg.query('displ &lt;= 4')\nmpg_b = mpg.query('displ &gt;= 5')\n\nmpg_a['hwy'].mean(), mpg_b['hwy'].mean()\n\n(np.float64(25.96319018404908), np.float64(18.07894736842105))\n\n\n\n\n\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota = mpg.query(\"manufacturer == 'toyota'\")\n\nmpg_audi['cty'].mean(), mpg_toyota['cty'].mean()\n\n(np.float64(17.61111111111111), np.float64(18.529411764705884))\n\n\n\n\n\n\nmpg_new = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/hw2.html#페이지-1",
    "href": "posts/hw2/hw2.html#페이지-1",
    "title": "hw2",
    "section": "153 페이지",
    "text": "153 페이지\n\nQ1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. audi'에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi_mpg = mpg.query(\"manufacturer == 'audi'\")\naudi_mpg.sort_values('hwy', ascending = False).head()\n\nmpg.query(\"manufacturer == 'audi'\") \\\n   .sort_values('hwy', ascending = False) \\\n   .head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/hw2.html#페이지-2",
    "href": "posts/hw2/hw2.html#페이지-2",
    "title": "hw2",
    "section": "158 페이지",
    "text": "158 페이지\nmpg데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니다. 두 변수는 각각 활용하는 대신 하나의 합산 연비 변수를 만들어 분석하려고 합니다.\n\nQ1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 합산 연비 변수를 추가하세요.\n\nmpg_new = mpg.copy()\nmpg_new = mpg_new.assign(mileage = mpg_new['cty'] + mpg_new['hwy'])\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_new = mpg_new.assign(mileage_mean = mpg_new['mileage'] / 2)\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_new.sort_values('mileage_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg원본을 이용하세요.\n\nmpg.assign(mileage = mpg_new['cty'] + mpg_new['hwy']) \\\n   .assign(mileage_mean = mpg_new['mileage'] / 2) \\\n   .sort_values('mileage_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "myblog",
    "section": "",
    "text": "LS 빅데이터 스쿨 Homework 3\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\nyongraegod\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 4\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nyongraegod\n\n\n\n\n\n\n\n\n\n\n\n\n교과서 챕터 8\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nyongraegod\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 3\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nyongraegod\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 2\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\nyongraegod\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 Homework 1\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 12, 2024\n\n\nyongraegod\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw1/hw1.html",
    "href": "posts/hw1/hw1.html",
    "title": "hw1",
    "section": "",
    "text": "#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\n\nprice_avg = sum(df[\"가격\"]) / 3\nvol_avg = sum(df[\"판매량\"]) / 3\n\nprint(\"과일 가격의 평균은\", price_avg)\nprint(\"과일 판매량의 평균은\", vol_avg)\n\n과일 가격의 평균은 2100.0\n과일 판매량의 평균은 25.0"
  },
  {
    "objectID": "posts/hw1/hw1.html#페이지",
    "href": "posts/hw1/hw1.html#페이지",
    "title": "hw1",
    "section": "",
    "text": "#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\n\nprice_avg = sum(df[\"가격\"]) / 3\nvol_avg = sum(df[\"판매량\"]) / 3\n\nprint(\"과일 가격의 평균은\", price_avg)\nprint(\"과일 판매량의 평균은\", vol_avg)\n\n과일 가격의 평균은 2100.0\n과일 판매량의 평균은 25.0"
  },
  {
    "objectID": "posts/hw1/hw1.html#페이지-1",
    "href": "posts/hw1/hw1.html#페이지-1",
    "title": "hw1",
    "section": "115 페이지",
    "text": "115 페이지\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\n# mpg 데이터 불러오기\nmpg_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\nmpg_new = mpg_raw.copy()\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\n#cty -&gt; city\nmpg_new = mpg_new.rename(columns = {'cty' : 'city'})\n\n#hwy -&gt; highway\nmpg_new = mpg_new.rename(columns = {'hwy' : 'highway'})\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/hw1.html#페이지-2",
    "href": "posts/hw1/hw1.html#페이지-2",
    "title": "hw1",
    "section": "130 페이지",
    "text": "130 페이지\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\n# midwest.csv 데이터 불러오기\nmidwest_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/midwest.csv')\nmidwest_new = midwest_raw.copy()\nmidwest_new\n\nmidwest_new.head()\nmidwest_new.tail()\nmidwest_new.shape\nmidwest_new.info()\nmidwest_new.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구)변수를 asian으로 수정하세요.\n\n#poptotal -&gt; total\nmidwest_new = midwest_new.rename(columns = {'poptotal' : 'total'})\n\n#popasian -&gt; asian\nmidwest_new = midwest_new.rename(columns = {'popasian' : 'asian'})\n\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest_new['a_ratio'] = (midwest_new[\"asian\"] / midwest_new[\"total\"]) * 100\nmidwest_new['a_ratio'].plot.hist()\nimport matplotlib.pyplot as plt\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n#아시아 인구 백분율 전체 평균\nmidwest_new['a_mean'] = (midwest_new['a_ratio'].mean())\n\n#평균을 초과하는지 비교\nmidwest_new['vs_mean'] = np.where(midwest_new['a_ratio'] &gt; midwest_new['a_mean'], 'large', 'small')\nmidwest_new\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\na_ratio\na_mean\nvs_mean\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n0.487246\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n0.487246\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n0.487246\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n0.487246\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n0.487246\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n0.487246\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n0.487246\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n0.487246\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n0.487246\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n0.487246\nlarge\n\n\n\n\n437 rows × 31 columns\n\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\n#빈도 구하기\ncount_vs = midwest_new['vs_mean'].value_counts()\ncount_vs\n\n#막대 그래프 만들기\ncount_vs.plot.bar(rot = 0)"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "LS 빅데이터 스쿨 Homework 1",
    "section": "",
    "text": "1일차|2x2"
  },
  {
    "objectID": "posts/hw1/index.html#페이지",
    "href": "posts/hw1/index.html#페이지",
    "title": "LS 빅데이터 스쿨 Homework 1",
    "section": "84 페이지",
    "text": "84 페이지\n\nQ1. 다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\n#!pip install pandas\nimport pandas as pd\n\ndf = pd.DataFrame({\"제품\"   : [\"사과\",\"딸기\",\"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nprice_avg = sum(df[\"가격\"]) / 3\nvol_avg = sum(df[\"판매량\"]) / 3\n\nprint(\"과일 가격의 평균은\", price_avg)\nprint(\"과일 판매량의 평균은\", vol_avg)\n\n과일 가격의 평균은 2100.0\n과일 판매량의 평균은 25.0"
  },
  {
    "objectID": "posts/hw1/index.html#페이지-1",
    "href": "posts/hw1/index.html#페이지-1",
    "title": "LS 빅데이터 스쿨 Homework 1",
    "section": "115 페이지",
    "text": "115 페이지\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\n# mpg 데이터 불러오기\nmpg_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\nmpg_new = mpg_raw.copy()\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\n#cty -&gt; city\nmpg_new = mpg_new.rename(columns = {'cty' : 'city'})\n\n#hwy -&gt; highway\nmpg_new = mpg_new.rename(columns = {'hwy' : 'highway'})\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/index.html#페이지-2",
    "href": "posts/hw1/index.html#페이지-2",
    "title": "LS 빅데이터 스쿨 Homework 1",
    "section": "130 페이지",
    "text": "130 페이지\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\n# midwest.csv 데이터 불러오기\nmidwest_raw = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/midwest.csv')\nmidwest_new = midwest_raw.copy()\nmidwest_new\n\nmidwest_new.head()\nmidwest_new.tail()\nmidwest_new.shape\nmidwest_new.info()\nmidwest_new.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구)변수를 asian으로 수정하세요.\n\n#poptotal -&gt; total\nmidwest_new = midwest_new.rename(columns = {'poptotal' : 'total'})\n\n#popasian -&gt; asian\nmidwest_new = midwest_new.rename(columns = {'popasian' : 'asian'})\n\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest_new['a_ratio'] = (midwest_new[\"asian\"] / midwest_new[\"total\"]) * 100\nmidwest_new['a_ratio'].plot.hist()\nimport matplotlib.pyplot as plt\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n#아시아 인구 백분율 전체 평균\nmidwest_new['a_mean'] = (midwest_new['a_ratio'].mean())\n\n#평균을 초과하는지 비교\nmidwest_new['vs_mean'] = np.where(midwest_new['a_ratio'] &gt; midwest_new['a_mean'], 'large', 'small')\nmidwest_new\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\na_ratio\na_mean\nvs_mean\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n0.487246\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n0.487246\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n0.487246\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n0.487246\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n0.487246\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n0.487246\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n0.487246\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n0.487246\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n0.487246\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n0.487246\nlarge\n\n\n\n\n437 rows × 31 columns\n\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\n#빈도 구하기\ncount_vs = midwest_new['vs_mean'].value_counts()\ncount_vs\n\n#막대 그래프 만들기\ncount_vs.plot.bar(rot = 0)"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "",
    "text": "# mpg 데이터 불러오기\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nmpg_a = mpg.query('displ &lt;= 4')\nmpg_b = mpg.query('displ &gt;= 5')\n\nmpg_a['hwy'].mean(), mpg_b['hwy'].mean()\n\n(np.float64(25.96319018404908), np.float64(18.07894736842105))\n\n\n\n\n\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota = mpg.query(\"manufacturer == 'toyota'\")\n\nmpg_audi['cty'].mean(), mpg_toyota['cty'].mean()\n\n(np.float64(17.61111111111111), np.float64(18.529411764705884))\n\n\n\n\n\n\nmpg_new = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#페이지",
    "href": "posts/hw2/index.html#페이지",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "144 페이지",
    "text": "144 페이지\n\nQ1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\n# mpg 데이터 불러오기\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nmpg_a = mpg.query('displ &lt;= 4')\nmpg_b = mpg.query('displ &gt;= 5')\n\nmpg_a['hwy'].mean(), mpg_b['hwy'].mean()\n\n(np.float64(25.96319018404908), np.float64(18.07894736842105))\n\n\n\n\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. 'audi'와 'toyota'중 어느 manufacture(자동차 제조 회사)의 cty(도시연비) 평균이 더 높은지 알아보세요.\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota = mpg.query(\"manufacturer == 'toyota'\")\n\nmpg_audi['cty'].mean(), mpg_toyota['cty'].mean()\n\n(np.float64(17.61111111111111), np.float64(18.529411764705884))\n\n\n\n\nQ3. 'chevrolet', 'ford', 'honda' 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy전체 평균을 구해 보세요.\n\nmpg_new = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#페이지-1",
    "href": "posts/hw2/index.html#페이지-1",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "153 페이지",
    "text": "153 페이지\n\nQ1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. audi'에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi_mpg = mpg.query(\"manufacturer == 'audi'\")\naudi_mpg.sort_values('hwy', ascending = False).head()\n\nmpg.query(\"manufacturer == 'audi'\") \\\n   .sort_values('hwy', ascending = False) \\\n   .head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#페이지-2",
    "href": "posts/hw2/index.html#페이지-2",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "158 페이지",
    "text": "158 페이지\nmpg데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니다. 두 변수는 각각 활용하는 대신 하나의 합산 연비 변수를 만들어 분석하려고 합니다.\n\nQ1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 합산 연비 변수를 추가하세요.\n\nmpg_new = mpg.copy()\nmpg_new = mpg_new.assign(mileage = mpg_new['cty'] + mpg_new['hwy'])\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_new = mpg_new.assign(mileage_mean = mpg_new['mileage'] / 2)\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_new.sort_values('mileage_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg원본을 이용하세요.\n\nmpg.assign(mileage = mpg_new['cty'] + mpg_new['hwy']) \\\n   .assign(mileage_mean = mpg_new['mileage'] / 2) \\\n   .sort_values('mileage_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw3/index.html#페이지",
    "href": "posts/hw3/index.html#페이지",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "173 페이지",
    "text": "173 페이지\n\nimport pandas as pd\nimport numpy as np\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nfuel = pd.DataFrame({'fl'       : ['c','d','e','p','r'],\n                     'price_fl' : [2.35, 2.38, 2.11, 2.76, 2.22]})\nprint(fuel)\n\nprint(mpg)\n\n  fl  price_fl\n0  c      2.35\n1  d      2.38\n2  e      2.11\n3  p      2.76\n4  r      2.22\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n    category  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[234 rows x 11 columns]\n\n\n\nQ1. mpg데이터에는 연료 종류를 나타낸 fl변수는 있지만 연료 가격을 나타낸 변수는 없습니다. 앞에서 만든 fuel데이터를 이용해 mpg데이터에 price_fl(연료 가격) 변수를 추가하세요.\n\nmpg = pd.merge(mpg, fuel, how = 'left', on = 'fl')\nprint(mpg)\n\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n    category  price_fl  \n0    compact      2.76  \n1    compact      2.76  \n2    compact      2.76  \n3    compact      2.76  \n4    compact      2.76  \n..       ...       ...  \n229  midsize      2.76  \n230  midsize      2.76  \n231  midsize      2.76  \n232  midsize      2.76  \n233  midsize      2.76  \n\n[234 rows x 12 columns]\n\n\n\n\n\nQ2. 연료 가격 변수가 잘 추가됐는지 확인하기 위해 model,fl,price_fl 변수를 추출해 앞부분 5행을 출력해 보세요.\n\nmpg[['model','fl','price_fl']].head()\n\n\n\n\n\n\n\n\nmodel\nfl\nprice_fl\n\n\n\n\n0\na4\np\n2.76\n\n\n1\na4\np\n2.76\n\n\n2\na4\np\n2.76\n\n\n3\na4\np\n2.76\n\n\n4\na4\np\n2.76"
  },
  {
    "objectID": "posts/hw4/index.html",
    "href": "posts/hw4/index.html",
    "title": "LS 빅데이터 스쿨 Homework 4",
    "section": "",
    "text": "mpg데이터와 midwest데이터를 이용해 분석 문제를 해결해 보세요.\n\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nsns.scatterplot(data = mpg, x='cty', y='hwy')\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/midwest.csv')\ndf\nsns.scatterplot(data = df, x = 'poptotal', y = 'popasian') \\\n   .set(xlim = [0,500000], ylim = [0,10000])"
  },
  {
    "objectID": "posts/hw4/index.html#페이지",
    "href": "posts/hw4/index.html#페이지",
    "title": "LS 빅데이터 스쿨 Homework 4",
    "section": "204 페이지",
    "text": "204 페이지\nmpg데이터와 midwest데이터를 이용해 분석 문제를 해결해 보세요.\n\nQ1. mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nsns.scatterplot(data = mpg, x='cty', y='hwy')\n\n\n\n\n\n\n\n\n\n\n\nQ2. 미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\ndf = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/midwest.csv')\ndf\nsns.scatterplot(data = df, x = 'poptotal', y = 'popasian') \\\n   .set(xlim = [0,500000], ylim = [0,10000])"
  },
  {
    "objectID": "posts/hw4/index.html#페이지-1",
    "href": "posts/hw4/index.html#페이지-1",
    "title": "LS 빅데이터 스쿨 Homework 4",
    "section": "211 페이지",
    "text": "211 페이지\nmpg데이터를 이용해 분석 문제를 해결해 보세요.\n\nQ1. 어떤 회사에서 생산한 'suv'차종의 도시 연비가 높은지 알아보려고 합니다. 'suv'차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 가장 높은 순으로 정렬하세요.\n\nmpg_suv = mpg.query('category == \"suv\"').groupby('manufacturer', as_index = True) \\\n       .agg(n = ('cty', 'mean'))\n\nsns.barplot(data = mpg_suv.sort_values(\"n\", ascending = False).head(5), x = 'manufacturer', y = 'n')\n\n\n\n\n\n\n\n\n\n\n\nQ2. 자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nsns.countplot(data = mpg, x = 'category',\n              order = mpg['category'].value_counts().index)"
  },
  {
    "objectID": "posts/교과서 챕터 8/index.html",
    "href": "posts/교과서 챕터 8/index.html",
    "title": "교과서 챕터 8",
    "section": "",
    "text": "데이터 불러오기\n\n\nimport pandas as pd\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\nmpg.head()\nmpg.shape\n\n(234, 11)\n\n\n\nSeaborn 패키지 불러오기\n\n\n!pip install seaborn\n!pip install plotly.express\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nRequirement already satisfied: seaborn in c:\\ds\\python\\python312\\lib\\site-packages (0.13.2)\nRequirement already satisfied: numpy!=1.24.0,&gt;=1.20 in c:\\ds\\python\\python312\\lib\\site-packages (from seaborn) (2.0.0)\nRequirement already satisfied: pandas&gt;=1.2 in c:\\ds\\python\\python312\\lib\\site-packages (from seaborn) (2.2.2)\nRequirement already satisfied: matplotlib!=3.6.1,&gt;=3.4 in c:\\ds\\python\\python312\\lib\\site-packages (from seaborn) (3.9.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (1.2.1)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (4.53.1)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (1.4.5)\nRequirement already satisfied: packaging&gt;=20.0 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (24.1)\nRequirement already satisfied: pillow&gt;=8 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (10.4.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (3.1.2)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=1.2-&gt;seaborn) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=1.2-&gt;seaborn) (2024.1)\nRequirement already satisfied: six&gt;=1.5 in c:\\ds\\python\\python312\\lib\\site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (1.16.0)\nRequirement already satisfied: plotly.express in c:\\ds\\python\\python312\\lib\\site-packages (0.4.1)\nRequirement already satisfied: pandas&gt;=0.20.0 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (2.2.2)\nRequirement already satisfied: plotly&gt;=4.1.0 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (5.22.0)\nRequirement already satisfied: statsmodels&gt;=0.9.0 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (0.14.2)\nRequirement already satisfied: scipy&gt;=0.18 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (1.14.0)\nRequirement already satisfied: patsy&gt;=0.5 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (0.5.6)\nRequirement already satisfied: numpy&gt;=1.11 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (2.0.0)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=0.20.0-&gt;plotly.express) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=0.20.0-&gt;plotly.express) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=0.20.0-&gt;plotly.express) (2024.1)\nRequirement already satisfied: six in c:\\ds\\python\\python312\\lib\\site-packages (from patsy&gt;=0.5-&gt;plotly.express) (1.16.0)\nRequirement already satisfied: tenacity&gt;=6.2.0 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly&gt;=4.1.0-&gt;plotly.express) (8.5.0)\nRequirement already satisfied: packaging in c:\\ds\\python\\python312\\lib\\site-packages (from plotly&gt;=4.1.0-&gt;plotly.express) (24.1)\n\n\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\n\n\nseaborn을 사용한 산점도\n\n\nsns.scatterplot(data=mpg,\n                x=\"displ\",\n                y=\"hwy\",\n                hue=\"drv\") \\\n    .set(xlim = [3,6], ylim = [10,30])\n\n\n\n\n\n\n\n\n\n\nplotly를 사용한 산점도\n\n\npx.scatter(data_frame = mpg,\n           x='displ', y='hwy', color='drv')\n\n                                                \n\n\n\n\n\n\n데이터 전처리\n\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n            .agg(mean_hwy = ('hwy','mean'))\ndf_mpg\n\n\n\n\n\n\n\n\ndrv\nmean_hwy\n\n\n\n\n0\n4\n19.174757\n\n\n1\nf\n28.160377\n\n\n2\nr\n21.000000\n\n\n\n\n\n\n\n\n\n그래프로 표현\n\n\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\", ascending = False),\n            x = 'drv', y = 'mean_hwy', hue = 'drv')"
  },
  {
    "objectID": "posts/교과서 챕터 8/index.html#빈도-막대-그래프-그리기",
    "href": "posts/교과서 챕터 8/index.html#빈도-막대-그래프-그리기",
    "title": "교과서 챕터 8",
    "section": "빈도 막대 그래프 그리기",
    "text": "빈도 막대 그래프 그리기\n\n데이터 불러오기\n\n\nimport pandas as pd\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\nmpg.head()\nmpg.shape\n\n(234, 11)\n\n\n\nSeaborn 패키지 불러오기\n\n\n!pip install seaborn\n!pip install plotly.express\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nRequirement already satisfied: seaborn in c:\\ds\\python\\python312\\lib\\site-packages (0.13.2)\nRequirement already satisfied: numpy!=1.24.0,&gt;=1.20 in c:\\ds\\python\\python312\\lib\\site-packages (from seaborn) (2.0.0)\nRequirement already satisfied: pandas&gt;=1.2 in c:\\ds\\python\\python312\\lib\\site-packages (from seaborn) (2.2.2)\nRequirement already satisfied: matplotlib!=3.6.1,&gt;=3.4 in c:\\ds\\python\\python312\\lib\\site-packages (from seaborn) (3.9.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (1.2.1)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (4.53.1)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (1.4.5)\nRequirement already satisfied: packaging&gt;=20.0 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (24.1)\nRequirement already satisfied: pillow&gt;=8 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (10.4.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (3.1.2)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\ds\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=1.2-&gt;seaborn) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=1.2-&gt;seaborn) (2024.1)\nRequirement already satisfied: six&gt;=1.5 in c:\\ds\\python\\python312\\lib\\site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib!=3.6.1,&gt;=3.4-&gt;seaborn) (1.16.0)\nRequirement already satisfied: plotly.express in c:\\ds\\python\\python312\\lib\\site-packages (0.4.1)\nRequirement already satisfied: pandas&gt;=0.20.0 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (2.2.2)\nRequirement already satisfied: plotly&gt;=4.1.0 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (5.22.0)\nRequirement already satisfied: statsmodels&gt;=0.9.0 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (0.14.2)\nRequirement already satisfied: scipy&gt;=0.18 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (1.14.0)\nRequirement already satisfied: patsy&gt;=0.5 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (0.5.6)\nRequirement already satisfied: numpy&gt;=1.11 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly.express) (2.0.0)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=0.20.0-&gt;plotly.express) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=0.20.0-&gt;plotly.express) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\ds\\python\\python312\\lib\\site-packages (from pandas&gt;=0.20.0-&gt;plotly.express) (2024.1)\nRequirement already satisfied: six in c:\\ds\\python\\python312\\lib\\site-packages (from patsy&gt;=0.5-&gt;plotly.express) (1.16.0)\nRequirement already satisfied: tenacity&gt;=6.2.0 in c:\\ds\\python\\python312\\lib\\site-packages (from plotly&gt;=4.1.0-&gt;plotly.express) (8.5.0)\nRequirement already satisfied: packaging in c:\\ds\\python\\python312\\lib\\site-packages (from plotly&gt;=4.1.0-&gt;plotly.express) (24.1)\n\n\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\nscatter() 사용하기\n\nseaborn을 사용한 산점도\n\n\nsns.scatterplot(data=mpg,\n                x=\"displ\",\n                y=\"hwy\",\n                hue=\"drv\") \\\n    .set(xlim = [3,6], ylim = [10,30])\n\n\n\n\n\n\n\n\n\n\nplotly를 사용한 산점도\n\n\npx.scatter(data_frame = mpg,\n           x='displ', y='hwy', color='drv')\n\n                                                \n\n\n\n\nbarplot() 사용하기\n\n데이터 전처리\n\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n            .agg(mean_hwy = ('hwy','mean'))\ndf_mpg\n\n\n\n\n\n\n\n\ndrv\nmean_hwy\n\n\n\n\n0\n4\n19.174757\n\n\n1\nf\n28.160377\n\n\n2\nr\n21.000000\n\n\n\n\n\n\n\n\n\n그래프로 표현\n\n\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\", ascending = False),\n            x = 'drv', y = 'mean_hwy', hue = 'drv')\n\n\n\n\n\n\n\n\n\n\n\np.318 px.bar()를 이용한 막대 그래프 만들기\n\n자동차 종류별 빈도 구하기\n\n\ndf = mpg.groupby('category', as_index = False) \\\n        .agg(n = ('category', 'count'))\ndf\n\n\n\n\n\n\n\n\ncategory\nn\n\n\n\n\n0\n2seater\n5\n\n\n1\ncompact\n47\n\n\n2\nmidsize\n41\n\n\n3\nminivan\n11\n\n\n4\npickup\n33\n\n\n5\nsubcompact\n35\n\n\n6\nsuv\n62\n\n\n\n\n\n\n\n\n\n막대 그래프 만들기\n\n\npx.bar(data_frame = df, x = 'category', y = 'n', color = 'category')\n\n                                                \n\n\n\n\n\np.319 px.line()를 이용한 선 그래프 만들기\n\neconomics 불러오기\n\n\neconomics = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/economics.csv')\n\n\n\n선 그래프 만들기\n\n\npx.line(data_frame = economics, x = 'date', y = 'psavert')"
  },
  {
    "objectID": "posts/hw2-2/index.html#페이지",
    "href": "posts/hw2-2/index.html#페이지",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "173 페이지",
    "text": "173 페이지\n\nimport pandas as pd\nimport numpy as np\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nfuel = pd.DataFrame({'fl'       : ['c','d','e','p','r'],\n                     'price_fl' : [2.35, 2.38, 2.11, 2.76, 2.22]})\nprint(fuel)\n\nprint(mpg)\n\n  fl  price_fl\n0  c      2.35\n1  d      2.38\n2  e      2.11\n3  p      2.76\n4  r      2.22\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n    category  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[234 rows x 11 columns]\n\n\n\nQ1. mpg데이터에는 연료 종류를 나타낸 fl변수는 있지만 연료 가격을 나타낸 변수는 없습니다. 앞에서 만든 fuel데이터를 이용해 mpg데이터에 price_fl(연료 가격) 변수를 추가하세요.\n\nmpg = pd.merge(mpg, fuel, how = 'left', on = 'fl')\nprint(mpg)\n\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n    category  price_fl  \n0    compact      2.76  \n1    compact      2.76  \n2    compact      2.76  \n3    compact      2.76  \n4    compact      2.76  \n..       ...       ...  \n229  midsize      2.76  \n230  midsize      2.76  \n231  midsize      2.76  \n232  midsize      2.76  \n233  midsize      2.76  \n\n[234 rows x 12 columns]\n\n\n\n\n\nQ2. 연료 가격 변수가 잘 추가됐는지 확인하기 위해 model,fl,price_fl 변수를 추출해 앞부분 5행을 출력해 보세요.\n\nmpg[['model','fl','price_fl']].head()\n\n\n\n\n\n\n\n\nmodel\nfl\nprice_fl\n\n\n\n\n0\na4\np\n2.76\n\n\n1\na4\np\n2.76\n\n\n2\na4\np\n2.76\n\n\n3\na4\np\n2.76\n\n\n4\na4\np\n2.76"
  },
  {
    "objectID": "posts/hw2-1/index.html#페이지",
    "href": "posts/hw2-1/index.html#페이지",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "144 페이지",
    "text": "144 페이지\n\nQ1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\n# mpg 데이터 불러오기\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nmpg_a = mpg.query('displ &lt;= 4')\nmpg_b = mpg.query('displ &gt;= 5')\n\nmpg_a['hwy'].mean(), mpg_b['hwy'].mean()\n\n(np.float64(25.96319018404908), np.float64(18.07894736842105))\n\n\n\n\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. 'audi'와 'toyota'중 어느 manufacture(자동차 제조 회사)의 cty(도시연비) 평균이 더 높은지 알아보세요.\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota = mpg.query(\"manufacturer == 'toyota'\")\n\nmpg_audi['cty'].mean(), mpg_toyota['cty'].mean()\n\n(np.float64(17.61111111111111), np.float64(18.529411764705884))\n\n\n\n\nQ3. 'chevrolet', 'ford', 'honda' 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy전체 평균을 구해 보세요.\n\nmpg_new = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2-1/index.html#페이지-1",
    "href": "posts/hw2-1/index.html#페이지-1",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "153 페이지",
    "text": "153 페이지\n\nQ1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. audi'에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi_mpg = mpg.query(\"manufacturer == 'audi'\")\naudi_mpg.sort_values('hwy', ascending = False).head()\n\nmpg.query(\"manufacturer == 'audi'\") \\\n   .sort_values('hwy', ascending = False) \\\n   .head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2-1/index.html#페이지-2",
    "href": "posts/hw2-1/index.html#페이지-2",
    "title": "LS 빅데이터 스쿨 Homework 2",
    "section": "158 페이지",
    "text": "158 페이지\nmpg데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니다. 두 변수는 각각 활용하는 대신 하나의 합산 연비 변수를 만들어 분석하려고 합니다.\n\nQ1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 합산 연비 변수를 추가하세요.\n\nmpg_new = mpg.copy()\nmpg_new = mpg_new.assign(mileage = mpg_new['cty'] + mpg_new['hwy'])\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_new = mpg_new.assign(mileage_mean = mpg_new['mileage'] / 2)\nmpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_new.sort_values('mileage_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg원본을 이용하세요.\n\nmpg.assign(mileage = mpg_new['cty'] + mpg_new['hwy']) \\\n   .assign(mileage_mean = mpg_new['mileage'] / 2) \\\n   .sort_values('mileage_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nmileage\nmileage_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw2-3/index.html#페이지",
    "href": "posts/hw2-3/index.html#페이지",
    "title": "LS 빅데이터 스쿨 Homework 4",
    "section": "204 페이지",
    "text": "204 페이지\nmpg데이터와 midwest데이터를 이용해 분석 문제를 해결해 보세요.\n\nQ1. mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/mpg.csv')\n\nsns.scatterplot(data = mpg, x='cty', y='hwy')\n\n\n\n\n\n\n\n\n\n\n\nQ2. 미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\ndf = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/midwest.csv')\ndf\nsns.scatterplot(data = df, x = 'poptotal', y = 'popasian') \\\n   .set(xlim = [0,500000], ylim = [0,10000])"
  },
  {
    "objectID": "posts/hw2-3/index.html#페이지-1",
    "href": "posts/hw2-3/index.html#페이지-1",
    "title": "LS 빅데이터 스쿨 Homework 4",
    "section": "211 페이지",
    "text": "211 페이지\nmpg데이터를 이용해 분석 문제를 해결해 보세요.\n\nQ1. 어떤 회사에서 생산한 'suv'차종의 도시 연비가 높은지 알아보려고 합니다. 'suv'차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 가장 높은 순으로 정렬하세요.\n\nmpg_suv = mpg.query('category == \"suv\"').groupby('manufacturer', as_index = True) \\\n       .agg(n = ('cty', 'mean'))\n\nsns.barplot(data = mpg_suv.sort_values(\"n\", ascending = False).head(5), x = 'manufacturer', y = 'n')\n\n\n\n\n\n\n\n\n\n\n\nQ2. 자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nsns.countplot(data = mpg, x = 'category',\n              order = mpg['category'].value_counts().index)"
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math"
  },
  {
    "objectID": "posts/hw3/index.html#정규분포-pdf-값을-계산하는-자신만의-파이썬-함수를-정의하고-정규분포-mu3-sigma2의-pdf를-그릴-것.",
    "href": "posts/hw3/index.html#정규분포-pdf-값을-계산하는-자신만의-파이썬-함수를-정의하고-정규분포-mu3-sigma2의-pdf를-그릴-것.",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu=3, sigma=2의 pdf를 그릴 것.",
    "text": "1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu=3, sigma=2의 pdf를 그릴 것.\n\ndef pdf(x, mu, sigma):\n    a = 1 / (sigma * np.sqrt(2 * math.pi))\n    b = (x - mu) / sigma\n    return a * np.exp((-1/2) * b**2)\n\n\nk = np.linspace(-7, 13)\ny = pdf(k, 3, 2)\nplt.plot(k, y, color=\"orchid\", linewidth=4)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw3/index.html#파이썬-scipy-패키지를-사용해서-다음과-같은-확률을-구하시오.",
    "href": "posts/hw3/index.html#파이썬-scipy-패키지를-사용해서-다음과-같은-확률을-구하시오.",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "2. 파이썬 scipy 패키지를 사용해서 다음과 같은 확률을 구하시오.",
    "text": "2. 파이썬 scipy 패키지를 사용해서 다음과 같은 확률을 구하시오.\n\nfrom scipy.stats import bernoulli\nfrom scipy.stats import binom\nfrom scipy.stats import norm\n\n\nX~N(2, 3^2)\n\n\nP(X&lt;3)\n\n\n\na = norm.cdf(3,loc=2,scale=3)\nprint('확률은 ' + str(a.round(3)) + '입니다.')\n\n확률은 0.631입니다.\n\n\n\n\n\nP(2&lt;X&lt;5)\n\n\n\nb = norm.cdf(5,loc=2,scale=3) - norm.cdf(2,loc=2,scale=3)\nprint('확률은 ' + str(b.round(3)) + '입니다.')\n\n확률은 0.341입니다.\n\n\n\n\n\nP(X&lt;3 or X&gt;7)\n\n\n\nc = 1 - (norm.cdf(7,loc=2,scale=3) - norm.cdf(3,loc=2,scale=3))\nprint('확률은 ' + str(c.round(3)) + '입니다.')\n\n확률은 0.678입니다."
  },
  {
    "objectID": "posts/hw3/index.html#ls-빅데이터스쿨-학생들의-중간고사-점수는-평균이-30이고-분산이-4인-정규분포를-따른다.-상위-5에-해당하는-학생의-점수는",
    "href": "posts/hw3/index.html#ls-빅데이터스쿨-학생들의-중간고사-점수는-평균이-30이고-분산이-4인-정규분포를-따른다.-상위-5에-해당하는-학생의-점수는",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "3. LS 빅데이터스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?",
    "text": "3. LS 빅데이터스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?\n\n# X~N(30,2)\nd = norm.ppf(0.95,30,2)\nprint('해당 학생의 점수는 ' + str(d.round(3)) + '입니다.')\n\n해당 학생의 점수는 33.29입니다."
  },
  {
    "objectID": "posts/hw3/index.html#정규분포-pdf-값을-계산하는-자신만의-파이썬-함수를-정의하고-정규분포-mu-3-sigma-2의-pdf를-그려보시오.",
    "href": "posts/hw3/index.html#정규분포-pdf-값을-계산하는-자신만의-파이썬-함수를-정의하고-정규분포-mu-3-sigma-2의-pdf를-그려보시오.",
    "title": "LS 빅데이터 스쿨 Homework 3",
    "section": "1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2의 pdf를 그려보시오.",
    "text": "1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2의 pdf를 그려보시오.\n\ndef pdf(x, mu, sigma):\n    a = 1 / (sigma * np.sqrt(2 * math.pi))\n    b = (x - mu) / sigma\n    return a * np.exp((-1/2) * b**2)\n\n\nk = np.linspace(-7, 13)\ny = pdf(k, 3, 2)\nplt.plot(k, y, color=\"orchid\", linewidth=4)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  }
]